<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		 
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<!-- <bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"> </bean> -->
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	<security:http>
		
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>

		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/> <!-- '/sample/admin'에 대한 접근을 설정한다 -->
				
		<!-- <security:form-login/> -->
		<security:form-login login-page="/customLogin" />
		<!-- login-page 속성의 URI는 반드시 GET방식으로 접근하는 URI를 지정한다. -->	
		
		
		<!-- 로그인과 마찬가지로 특정URI를 지정하고, 로그아웃 처리 후 직접 로직을 처리할 수 있는 핸들러를 등록할 수 있다. -->
		<!-- 로그아웃 시 세션을 무효화 시키는 설정이나 특정한 쿠키를 지우는 작업을 지정할 수 있다. -->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/>

	
		<!-- <security:access-denied-handler error-page="/accessError"/>  -->
		<!-- org.springframework.security.web.access.AccessDeniedHandler 인터페이스의 구현체를 지정하거나 error-page를 지정 -->
		<!-- '/accessError'라는 URI로 접근 제한 시 보이는 화면을 처리한다. -->
		
		<!-- security:access-denied-handler 의 error-page속성 대신에 CustomAccessDeniedHandler를 빈으로 등록해서 사용 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		<!-- error-page속성과 ref속성 둘 중 하나만으로 사용. 위의 방식은 '/sample/admin'에 member/member 계정으로 로그인하면 이전과 달리 '/accessError'로 리다이렉트 되는 것을 확인 -->
		
		
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
	</security:http>
		
  	<security:authentication-manager>	<!-- 스프링 시큐리티가 동작하기 위해서는 Authentication Manager라는 존재와 스프링 시큐리티의 시작 지점이 필요하기 때문에 최소한의 설정 지정 -->
		
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- <security:user-service>
				
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				추가된 설정의 핵심은 'member'라는 계정 정보를 가진 사용자가 로그인을 할 수 있도록 하는 것이다.
				'PasswordEncoder'라는 존재가 없기 때문에 오류 발생
				스프링 시큐리티 5버전부터 반드시 PasswordEncoder라는 존재를 이용하도록 변경되었다. 
					  스프링 시큐리티 4버전까지는 PasswordEncoder의 지정이 없어도 동작했지만, 5버전부터는 반드시 필요
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/> 추가된 admin사용자는 'ROLE_MEMBER'와 'ROLE_ADMIN'이라는 2개의
																												권한을 가지도록 설정한다.
				
			</security:user-service> -->
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userid, userpw, enabled from member where userid = ?"
				authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ?"/>-->
			
			 
			
			
			<!--change to Bcrypt <security:password-encoder ref="customPasswordEncoder"/> -->
			
			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
		</security:authentication-provider>	
	
	</security:authentication-manager>	
		
		
		
		
	<!-- 특정한 URI에 접근할 때 인터셉터를 이용해서 접근을 제한하는 설정은 <security:interceptor-url>을 이용한다. 
		 <security:interceptor-url>은 pattern이라는 속성과 access라는 속성을 지정해야만 한다.
		 pattern 속성은 말 그대로 URI의 패턴을 의미하고, access의 경우는 권한을 체크한다.
		 위의 경우 '/sample/member'라는 URI는 'ROLE_MEMBER'라는 권한이 있는 사용자만이 접근할 수 있다.
		 
		 access의 속성값으로 사용되는 문자열은 1)표현식과 2)권한명을 의미하는 문자열을 이용할 수 있다.
		 <security:http>는 기본 설정이 표현식을 이용하는 것이다. 만일 단순한 문자열만 이용하고 싶은 경우에는 use-expression="false"를 지정한다.
		 
		 표현식 사용 예)
		 
		<security:http auto-config="true" use-expressions="false"> 
			<security:intercept-url pattern="/sample/userPage" access="ROLE_MEMBER"/>
			<security:intercept-url pattern="/sample/puserPage" access="ROLE_MANAGER"/>
			<security:intercept-url pattern="/sample/adminPage" access="ROLE_ADMIN"/>
		</security:http>
		
		◆단순 로그인 처리
		로그인 화면이 보여지기는 하지만 로그인을 할 수 없는 상황이므로, '/sample/member'에 접근할 수 있는 방법은 아무것도 없는 상황이다. 
		추가적인 설정을 통해서 지정된 아이디와 패스워드로 로그인이 가능하도록 설정을 추가한다.
		
		스프링 시큐리티에서 명심해야 하는 사항 중 하나는 username이나 User라는 용어의 의미가 일반적인 시스템에서의 의미와 차이가 있다는 점이다.
		일반 시스템에서 userid는 스프링 시큐리티에서는 username에 해당한다. 일반적으로 사용자이름을 username이라고 처리하는 것과 혼동하면 안된다.
		
		User라는 용어 역시 혼란의 여지가 있다. 스프링 시큐리티의 User는 인증 정보와 권한을 가진 객체이므로 일반적인 경우에 사용하는 사용자 정보와는 다른 의미이다.
		예제에서는 이를 구분하기위해 시스템상의 회원 정보는 MemberVO라는 클래스를 이용. 단순히 로그인이 처리되는 것을 확인하기 위해서 메모리상에 문자열을 지정하고
		이를 기준으로 동작하도록 설정해 본다.
		
		인증과 권한에 대한 실제 처리는 UserDetailsService라는 것을 이용해서 처리하는데, XML에서 지정
	-->
	
	
	
</beans>